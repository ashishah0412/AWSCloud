name: Terraform - 02 Microservices Infrastructure AWS Infra

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform (init, validate, plan, apply, destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - init
          - validate
          - plan
          - apply
          - destroy
      confirm_apply:
        description: 'Type "yes" to confirm apply'
        required: false
        default: 'no'
        type: string
      confirm_destroy:
        description: 'Type "yes" to confirm destroy'
        required: false
        default: 'no'
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}     # optional: remove if not used
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC or Secrets)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Prefer assuming role via OIDC (set AWS_ROLE_ARN in repo secrets).
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          # If you prefer access keys, set AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY in secrets
          # and remove/comment role-to-assume.

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.8.0'

      - name: Debug workspace (verify paths)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "pwd: $(pwd)"
          ls -la "$GITHUB_WORKSPACE"
          ls -la "$GITHUB_WORKSPACE/02-Microservices-Architecture" || true
          ls -la "$GITHUB_WORKSPACE/02-Microservices-Architecture/infra" || true    

      - name: Terraform Init
        if: github.event.inputs.action == 'init' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' || github.event.inputs.action == 'validate'
        run: terraform init -input=false -no-color
        working-directory: 02-Microservices-Architecture/aws_infra/

      - name: Terraform Validate
        if: github.event.inputs.action == 'validate'
        run: terraform validate -no-color
        working-directory: 02-Microservices-Architecture/aws_infra/

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan -input=false -var-file=envs/prod.tfvars -out=tfplan -no-color | tee plan_output.txt
        working-directory: 02-Microservices-Architecture/aws_infra/

      # Upload the plan file for later steps
      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan  

      - name: Terraform Apply (uses plan)
        if: github.event.inputs.action == 'apply' && github.event.inputs.confirm_apply == 'yes'
        run: terraform apply -auto-approve tfplan
        working-directory: 02-Microservices-Architecture/aws_infra/

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'yes'
        run: terraform destroy -auto-approve -no-color -var-file=envs/prod.tfvars
        working-directory: 02-Microservices-Architecture/aws_infra/